*Thinking...*

> I'll rewrite the complete notes for both sections, making sure to include all the details I've mentioned. I'll maintain the style and format of the original notes, with clear section headers, code examples, and concise explanations. I'll organize them in the requested order: first the HTML Cat Photo App section, then the CSS Cafe Menu section.


## HTML Cat Photo App

HTML document structure:
  <!DOCTYPE html>
  <html>
    <head>
    </head>
    <body>
    </body>
  </html>

Prioritize text with header elements:
	<h1>Priority 1 text</h1>
	<h2>Priority 2 text</h2>
	<h3>Priority 3 text</h3>

Paragraph of text uses <p> element:
	<p>Paragraph of text</p>

To make a comment:
	<!--Insert comment here!-->

The <main> element is used to represent the main content of the body of an 
 HTML document. Helps for Engine Optimization and accessability:
  <html>
    <body>
      <main>
	<h1>CatPhotoApp</h1>
	<h2>Cat Photos</h2>
	<!-- TODO: Add link to cat photos -->
	<p>Everyone loves cute cats online!</p>
      </main>
    </body>
  </html>

NESTING is when you put elements inside other elements:
  <main>
    <h1>CatPhotoApp</h1>
  </main>

A void element is an element where it uses an opening tag but
 no closing tag:
  <img>

HTML ATTRIBUTES are special words used inside the opening tag of an 
 element to control the element's behavior:
  <img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg">

Add an ID attribute for uniquely identifying elements:
  <h2 id="cat-photos">Cat Photos</h2>
  /* This can be targeted with #cat-photos in CSS */

All <img> elements should have an alt attribute. The alt attribute's text is used for 
 screen readers to improve accessibility and is displayed if the image fails to load:
  <img src="cat.jpg" alt="A cat">

Link to another page with the anchor <a> element:
  <a href="https://www.freecodecamp.org">click here to go to freeCodeCamp.org</a>

You can use the target attribute on the anchor <a> element to open links in a new tab:
  <a href="https://www.freecodecamp.org" target="_blank">freeCodeCamp</a>

You can turn an image or other types of content into a link:
  <a href="example-link">
    <img src="image-link.jpg" alt="A photo of a cat.">
  </a>

Use DIV elements for general grouping of content:
  <div>
    <p>This content is grouped together.</p>
  </div>

Create a SECTION element to group related content:
  <section>
    <h2>Cat Photos</h2>
    <!-- TODO: Add link to cat photos -->
    <p>See more <a target="_blank" href="https://freecatphotoapp.com">cat photos</a> in our gallery.</p>
    <a href="https://freecatphotoapp.com"><img src="https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg" alt="A cute orange cat lying on its back."></a>
  </section>

Create lists with <ul> (unordered) and <ol> (ordered) elements:
  <h2>Things cats love:</h2>
  <ul>
    <li>cat nip</li>
    <li>laser pointers</li>
    <li>lasagna</li>
  </ul>

  <h2>Top 3 things cats hate:</h2>
  <ol>
    <li>flea treatment</li>
    <li>thunder</li>
    <li>other cats</li>
  </ol>

Create a FIGURE element with a caption for images:
  <figure>
    <img src="lasagna.jpg" alt="A slice of lasagna on a plate.">
    <figcaption>Cats <em>love</em> lasagna.</figcaption>
  </figure>

Emphasize text with <em> (italic emphasis) and <strong> (strong emphasis):
  <p>Cats <em>love</em> lasagna.</p>
  <p>Cats <strong>hate</strong> water.</p>

Create a FORM element for user input:
  <form action="https://freecatphotoapp.com/submit-cat-photo">
    <input type="text" name="catphotourl" placeholder="cat photo URL" required>
    <button type="submit">Submit</button>
  </form>

More form input validation:
  <input type="text" required placeholder="required field">
  <input type="email" placeholder="Enter your email">

Create RADIO BUTTONS for exclusive selection:
  <form>
    <label><input type="radio" name="indoor-outdoor" checked> Indoor</label>
    <label><input type="radio" name="indoor-outdoor"> Outdoor</label>
  </form>

Create CHECKBOXES for multiple selections:
  <form>
    <label><input type="checkbox" name="personality" checked> Loving</label>
    <label><input type="checkbox" name="personality"> Lazy</label>
    <label><input type="checkbox" name="personality"> Energetic</label>
  </form>

Use the VALUE attribute to specify data sent to server:
  <input type="radio" name="indoor-outdoor" id="indoor" value="indoor" checked>
  <input type="checkbox" name="personality" value="loving" checked>

Add a FIELDSET and LEGEND to group related form inputs:
  <fieldset>
    <legend>Is your cat an indoor or outdoor cat?</legend>
    <label><input type="radio" name="indoor-outdoor" value="indoor" checked> Indoor</label>
    <label><input type="radio" name="indoor-outdoor" value="outdoor"> Outdoor</label>
  </fieldset>

Create a FOOTER element for page footer content:
  <footer>
    <p>No Copyright - <a href="https://www.freecodecamp.org">freeCodeCamp.org</a></p>
  </footer>

## CSS Cafe Menu

The <style> element is used to define CSS within an HTML document:
  <head>
    <style>
      h1 {
        text-align: center;
      }
    </style>
  </head>

Link an external CSS file to your HTML document:
  <head>
    <link href="styles.css" rel="stylesheet">
  </head>

CSS SELECTORS target HTML elements to apply styles:
  h1 { 
    text-align: center; 
  }
  /* This targets all h1 elements */

Target elements with CLASS selectors by using a period:
  .menu {
    /* styles for elements with class="menu" */
  }

Target elements with ID selectors by using a hash symbol:
  #menu-title {
    /* styles for element with id="menu-title" */
  }

Different ways to specify colors:
  p {
    color: #8B4513; /* Hex color */
    color: rgb(139, 69, 19); /* RGB color */
    color: rgba(139, 69, 19, 0.8); /* RGBA with transparency */
  }

Use different CSS units:
  h1 {
    font-size: 40px; /* Pixels */
    line-height: 1.5; /* Unitless multiplier */
    margin: 2em; /* Relative to font size */
    width: 50%; /* Percentage of parent */
  }

Use nested selectors to target specific elements:
  .menu p {
    /* Only targets paragraphs inside elements with class="menu" */
    color: black;
  }

## Page Setup

Define a meta tag for proper character encoding:
  <meta charset="utf-8">

Add title element in the head:
  <head>
    <title>Cafe Menu</title>
  </head>

Set a background image for the body:
  body {
    background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);
  }

Change font family for the entire page:
  body {
    font-family: sans-serif;
  }

## Creating the Menu Container

Center an element with margin property:
  .menu {
    width: 80%;
    margin-left: auto;
    margin-right: auto;
  }
  /* Or use shorthand: margin: 0 auto; */

Limit maximum width to prevent stretching on large screens:
  .menu {
    max-width: 500px;
  }

Set background color:
  .menu {
    background-color: burlywood;
  }

Add padding inside the container:
  .menu {
    padding: 20px;
  }

Create rounded corners:
  .menu {
    border-radius: 25px;
  }

## Text Styling

Set text alignment:
  h1, h2, p {
    text-align: center;
  }

Change font family for specific elements:
  h1, h2 {
    font-family: Impact, serif;
  }

Set specific font sizes:
  h1 {
    font-size: 40px;
  }
  
  h2 {
    font-size: 30px;
  }

Add italic style to text:
  .established {
    font-style: italic;
  }

## Menu Items Layout

Create a class for menu items:
  <article class="item">
    <p class="flavor">French Vanilla</p>
    <p class="price">3.00</p>
  </article>

Display elements side by side:
  .item p {
    display: inline-block;
  }

Control width of inline-block elements:
  .flavor {
    width: 75%;
    text-align: left;
  }
  
  .price {
    width: 25%;
    text-align: right;
  }

Pattern for properly organizing the complete cafe menu:
  <main>
    <div class="menu">
      <h1>CAMPER CAFE</h1>
      <p class="established">Est. 2020</p>
      <hr>
      <section>
        <h2>Coffee</h2>
        <article class="item">
          <p class="flavor">French Vanilla</p>
          <p class="price">3.00</p>
        </article>
        <article class="item">
          <p class="flavor">Caramel Macchiato</p>
          <p class="price">3.75</p>
        </article>
        <!-- More coffee items -->
      </section>
      <section>
        <h2>Desserts</h2>
        <article class="item">
          <p class="dessert">Donut</p>
          <p class="price">1.50</p>
        </article>
        <!-- More dessert items -->
      </section>
      <hr>
      <footer>
        <p><a href="https://www.freecodecamp.org">Visit our website</a></p>
        <p class="address">123 Free Code Camp Drive</p>
      </footer>
    </div>
  </main>

## Dividers and Spacing

Add a horizontal line with the <hr> element:
  <hr>

Style horizontal lines:
  hr {
    height: 2px;
    background-color: brown;
    border-color: brown;
  }

Create space between sections:
  section {
    margin-bottom: 20px;
  }

## Links and Footer

Style links with different states:
  a {
    color: black;
  }
  
  a:visited {
    color: black;
  }
  
  a:hover {
    color: brown;
  }
  
  a:active {
    color: brown;
  }

Create a footer with contact information:
  <footer>
    <p>
      <a href="https://www.freecodecamp.org">Visit our website</a>
    </p>
    <p class="address">123 Free Code Camp Drive</p>
  </footer>

Style the footer:
  footer {
    font-size: 14px;
  }
  
  .address {
    margin-bottom: 5px;
  }

## CSS Box Model

The BOX MODEL consists of margin, border, padding, and content:
  margin → border → padding → content
  
  div {
    margin: 10px;   /* Space outside the element */
    border: 1px solid black;  /* Border around the element */
    padding: 15px;  /* Space inside the element */
  }

Shorthand for setting margins and padding:
  margin: 5px 10px 5px 10px;  /* top right bottom left */
  margin: 5px 10px;  /* top/bottom left/right */








## CSS Colors (Colored Markers)

### Basic HTML Setup

Let's set up our HTML document structure for the colored markers project:
  <!DOCTYPE html>
  <html>
    <head>
      <title>Colored Markers</title>
      <meta charset="utf-8">
      <link rel="stylesheet" href="styles.css">
    </head>
    <body>
      <h1>CSS Color Markers</h1>
      <div class="container">
        <div class="marker red"></div>
        <div class="marker green"></div>
        <div class="marker blue"></div>
      </div>
    </body>
  </html>

### CSS Color Representation

The RGB color model is like mixing paint with red, green, and blue light:
  .red {
    background-color: rgb(255, 0, 0); /* Red */
  }
  .green {
    background-color: rgb(0, 255, 0); /* Green */
  }
  .blue {
    background-color: rgb(0, 0, 255); /* Blue */
  }

Hex colors are another way to write the same colors, but using hexadecimal code:
  .red {
    background-color: #FF0000; /* Red */
  }
  .green {
    background-color: #00FF00; /* Green */
  }
  .blue {
    background-color: #0000FF; /* Blue */
  }

If all the digit pairs are the same, you can use a shorthand hex code:
  .red {
    background-color: #F00; /* Red */
  }
  .green {
    background-color: #0F0; /* Green */
  }
  .blue {
    background-color: #00F; /* Blue */
  }

HSL is another way to pick colors using hue, saturation and lightness:
  .red {
    background-color: hsl(0, 100%, 50%); /* Red */
  }
  .green {
    background-color: hsl(120, 100%, 50%); /* Green */
  }
  .blue {
    background-color: hsl(240, 100%, 50%); /* Blue */
  }

Want your colors to be see-through? Add alpha transparency:
  .red {
    background-color: rgba(255, 0, 0, 0.5); /* 50% transparent red */
  }
  .green {
    background-color: hsla(120, 100%, 50%, 0.5); /* 50% transparent green */
  }

### Gradients

Gradients let you blend colors smoothly. Here's a simple top-to-bottom gradient:
  .marker {
    background: linear-gradient(rgb(255, 0, 0), rgb(0, 255, 0));
  }

You can change the direction of your gradient:
  .marker {
    background: linear-gradient(to right, rgb(255, 0, 0), rgb(0, 255, 0));
    /* or using degrees */
    background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0));
  }

Why stop at two colors? Add as many as you want to your gradient:
  .marker {
    background: linear-gradient(
      rgb(255, 0, 0),
      rgb(255, 255, 0),
      rgb(0, 255, 0)
    );
  }

Control exactly where your colors transition with percentage stops:
  .marker {
    background: linear-gradient(
      rgb(255, 0, 0) 0%,
      rgb(255, 255, 0) 50%,
      rgb(0, 255, 0) 100%
    );
  }

### Borders and Box Model

Add borders around your elements to define their edges:
  .marker {
    border-width: 2px;
    border-style: solid;
    border-color: black;
  }

Save some typing with this border shorthand:
  .marker {
    border: 2px solid black;
  }

### Creating 3D Effects

Make your markers pop with shadows using box-shadow:
  .marker {
    box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5);
  }

The box-shadow property has several parts that control different aspects:
  .marker {
    /* box-shadow: offsetX offsetY blurRadius spreadRadius color; */
    box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.75);
  }

Layer multiple shadows for cooler effects:
  .marker {
    box-shadow: 
      0 0 20px 0 rgba(83, 14, 14, 0.8),
      -5px -5px 15px 0px #3B3B3B;
  }

### Marker Sleeve Effect

Let's make our markers look more realistic by adding a cap and sleeve:
  <div class="marker red">
    <div class="cap"></div>
    <div class="sleeve"></div>
  </div>

Now let's style these parts:
  .cap {
    width: 60px;
    height: 25px;
  }
  
  .sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);
    border-left: 10px double rgba(0, 0, 0, 0.75);
  }

### Putting it All Together

Here's the complete CSS for a realistic red marker with sleeve:
  .marker {
    height: 25px;
    width: 200px;
    margin: 10px auto;
  }
  
  .red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);
  }
  
  .cap {
    width: 60px;
    height: 25px;
  }
  
  .sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);
    border-left: 10px double rgba(0, 0, 0, 0.75);
  }
  
  .cap, .sleeve {
    display: inline-block;
  }

## HTML Forms

The form element is like a container that holds all your input fields:
  <form action="submit-url" method="post">
    <!-- Input elements go here -->
  </form>

Tell the form where to send the data with the action attribute:
  <form action="https://register-demo.freecodecamp.org">

The method attribute tells the browser how to send the data - usually POST for forms:
  <form method="post">

Every good webpage needs a title and description:
  <head>
    <title>Registration Form</title>
    <meta name="description" content="freeCodeCamp Registration Form Project">
  </head>

Let users know what they're filling out with a heading and description:
  <h1>Registration Form</h1>
  <p>Please fill out this form with the required information</p>

The input element is your Swiss Army knife for collecting data - it has many types:
  <input type="text"> <!-- For names, usernames, etc. -->
  <input type="email"> <!-- For email addresses -->
  <input type="password"> <!-- Hides what the user types -->
  <input type="number"> <!-- Only allows numbers -->
  <input type="date"> <!-- Shows a date picker -->
  <input type="file"> <!-- Lets users upload files -->
  <input type="radio"> <!-- For selecting one option from many -->
  <input type="checkbox"> <!-- For selecting multiple options -->
  <input type="submit"> <!-- The button to send the form -->

Labels help users understand what information you're asking for:
  <label for="email">Enter Your Email:</label>
  <input type="email" id="email" name="email">

Connect labels to inputs using the for attribute and id - this helps accessibility:
  <label for="first-name">First Name:</label>
  <input id="first-name" type="text">

Make sure you get important information by marking fields as required:
  <input type="text" required>

Help users know what to type with placeholder text:
  <input type="email" placeholder="example@mail.com">

Set limits for number inputs:
  <input type="number" min="13" max="120">

Limit how many characters someone can type:
  <input type="text" minlength="8" maxlength="20">

Use patterns to enforce specific formats (like passwords):
  <input type="password" pattern="[a-z0-5]{8,}" required>
  <!-- This only allows lowercase letters and numbers 0-5, and requires at least 8 characters -->

Need more than one line of text? Use a textarea:
  <textarea rows="3" cols="30" placeholder="Additional comments..."></textarea>

Create dropdown menus for selecting from a list of options:
  <select name="referrer">
    <option value="">(select one)</option>
    <option value="1">freeCodeCamp News</option>
    <option value="2">freeCodeCamp YouTube Channel</option>
    <option value="3">freeCodeCamp Forum</option>
    <option value="4">Other</option>
  </select>

Group related questions together with fieldset and legend:
  <fieldset>
    <legend>Account Type</legend>
    <label><input type="radio" name="account-type" value="personal"> Personal</label>
    <label><input type="radio" name="account-type" value="business"> Business</label>
  </fieldset>

Every form needs a submit button:
  <input type="submit" value="Register">
  <!-- Or -->
  <button type="submit">Register</button>

## Form Styling

Start with a clean slate by resetting margins and padding:
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

Make your form a nice width that works on different screens:
  form {
    width: 60vw;
    max-width: 500px;
    min-width: 300px;
    margin: 0 auto;
    padding-bottom: 2em;
  }

Style your fieldsets to organize the form visually:
  fieldset {
    border: none;
    padding: 2rem 0;
    border-bottom: 3px solid #3b3b3b;
  }
  
  fieldset:last-of-type {
    border-bottom: none;
  }

Make your labels stand out:
  label {
    display: block;
    margin: 0.5rem 0;
  }

Keep your inputs consistent:
  input,
  textarea,
  select {
    margin: 10px 0 0 0;
    width: 100%;
    min-height: 2em;
  }

Checkboxes and radio buttons need special styling:
  input[type="radio"],
  input[type="checkbox"] {
    width: unset;
    margin: 0 0.5em 0 0;
    vertical-align: middle;
  }

Create a nice-looking submit button:
  input[type="submit"] {
    display: block;
    width: 60%;
    margin: 1em auto;
    height: 2em;
    font-size: 1.1rem;
    background-color: #3b3b3b;
    color: white;
    border: none;
    min-width: 300px;
  }

Make your form look good on smaller screens too:
  @media (max-width: 500px) {
    form {
      width: 80vw;
    }
  }

